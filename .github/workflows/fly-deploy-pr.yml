name: Deploy PR to Fly.io

on:
  issue_comment:
    types: [created]

jobs:
  deploy:
    if: |
      github.event.issue.pull_request && 
      github.event.comment.body == '/deploy'
    runs-on: ubuntu-latest
    
    steps:
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            core.setOutput('head_sha', pr.data.head.sha);
            core.setOutput('head_ref', pr.data.head.ref);
            return pr.data;

      - name: Check organization membership
        id: check_membership
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.orgs.checkMembershipForUser({
                org: 'penumbra-zone',
                username: context.payload.comment.user.login
              });
              return true;
            } catch (error) {
              core.setFailed(`User ${context.payload.comment.user.login} is not a member of penumbra-zone organization`);
              return false;
            }

      - name: Add deployment reaction
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.head_sha }}

      - name: Set up Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Generate app name
        id: app_name
        run: echo "name=veil-pr-${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Build and deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          cd apps/veil
          
          # Create fly app if it doesn't exist
          if ! flyctl apps list | grep -q "${{ steps.app_name.outputs.name }}"; then
            flyctl apps create "${{ steps.app_name.outputs.name }}" --org personal
          fi
          
          # Set secrets
          echo "${{ secrets.PENUMBRA_INDEXER_CA_CERT }}" | flyctl secrets set PENUMBRA_INDEXER_CA_CERT --app "${{ steps.app_name.outputs.name }}" --stdin
          
          # Set environment variable for database connection
          flyctl secrets set PENUMBRA_INDEXER_ENDPOINT="${{ secrets.PENUMBRA_INDEXER_ENDPOINT }}" --app "${{ steps.app_name.outputs.name }}"
          
          # Deploy with custom build args
          flyctl deploy --app "${{ steps.app_name.outputs.name }}" \
            --build-arg BASE_URL="https://${{ steps.app_name.outputs.name }}.fly.dev" \
            --ha=false \
            --strategy immediate

      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            const url = `https://${{ steps.app_name.outputs.name }}.fly.dev`;
            const comment = `### Deployment Successful
            
            Application deployed to: ${url}
            
            This deployment will be automatically removed:
            - When this PR is merged or closed
            - After 12 hours
            
            Deployed by: @${context.payload.comment.user.login}
            Deployment time: ${new Date().toISOString()}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Add deployment metadata
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl apps set-metadata "${{ steps.app_name.outputs.name }}" \
            PR_NUMBER="${{ github.event.issue.number }}" \
            DEPLOYED_AT="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            DEPLOYED_BY="${{ github.event.comment.user.login }}"