/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function compute_position_id(a: number, b: number): void;
export function load_proving_key(a: number, b: number, c: number, d: number): void;
export function generate_spend_key(a: number, b: number, c: number): void;
export function get_full_viewing_key(a: number, b: number, c: number): void;
export function get_wallet_id(a: number, b: number, c: number): void;
export function get_address_by_index(a: number, b: number, c: number, d: number): void;
export function get_ephemeral_address(a: number, b: number, c: number, d: number): void;
export function is_controlled_address(a: number, b: number, c: number, d: number, e: number): void;
export function get_short_address_by_index(a: number, b: number, c: number, d: number): void;
export function decode_sct_root(a: number, b: number, c: number): void;
export function __wbg_wasmplanner_free(a: number): void;
export function wasmplanner_new(a: number, b: number, c: number, d: number): number;
export function wasmplanner_get_storage(a: number): number;
export function wasmplanner_expiry_height(a: number, b: number, c: number): void;
export function wasmplanner_set_gas_prices(a: number, b: number, c: number): void;
export function wasmplanner_set_fee_tier(a: number, b: number, c: number): void;
export function wasmplanner_memo(a: number, b: number, c: number): void;
export function wasmplanner_fee(a: number, b: number, c: number): void;
export function wasmplanner_output(a: number, b: number, c: number, d: number): void;
export function wasmplanner_swap_claim(a: number, b: number): number;
export function wasmplanner_swap(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function wasmplanner_ics20_withdrawal(a: number, b: number, c: number): void;
export function wasmplanner_plan(a: number, b: number, c: number): number;
export function build_action(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_viewserver_free(a: number): void;
export function viewserver_new(a: number, b: number, c: number, d: number, e: number): number;
export function viewserver_scan_block(a: number, b: number): number;
export function viewserver_flush_updates(a: number, b: number): void;
export function viewserver_get_sct_root(a: number, b: number): void;
export function viewserver_get_lpnft_asset(a: number, b: number, c: number, d: number): void;
export function encode_tx(a: number, b: number): void;
export function decode_tx(a: number, b: number, c: number): void;
export function authorize(a: number, b: number, c: number, d: number): void;
export function witness(a: number, b: number, c: number): void;
export function build(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function build_parallel(a: number, b: number, c: number, d: number, e: number): void;
export function transaction_info(a: number, b: number, c: number, d: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h259aa08a3d419337(a: number, b: number): void;
export function _dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hefea2306a6eb389f(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__he6b774926c6604d7(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h3b2cc4bbd927c77d(a: number, b: number, c: number, d: number): void;
