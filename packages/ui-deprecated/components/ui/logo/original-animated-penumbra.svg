<svg xmlns="http://www.w3.org/2000/svg" id="ringPlots" viewBox="0 0 1000 1000" width="100%" height="100%"
     style="background-color: black;" shape-rendering="geometricPrecision">
    <!-- This animation works by creating 22 rect elements which are filled with the radialGradient defined at the start. -->
    <!-- Then the 22 paths that will mask out these rect elements are declared. -->
    <!-- The Javascript script takes each path that was declared and generates the SVG path code for them by generating a -->
    <!-- perlin noise value from 0 to 2Pi which forms a full circle and then uses the 3rd dimension value of the perlin noise -->
    <!-- to create the wobble effect -->
    <!-- Gradient Filter for all Rectangles for Plot -->
    <defs>
        <!-- Define the radial gradient -->
        <!-- Adjust these gradient stops if the size of the animation viewBox is changed. -->
        <!-- These colours were gotten from the AfterEffects files so they should be very similar to the original animation. -->
        <radialGradient id="grad1" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
            <stop offset="57%" style="stop-color:#563c70;stop-opacity:1"/>
            <stop offset="66%" style="stop-color:#e1813b;stop-opacity:1"/>
            <stop offset="67%" style="stop-color:#f77e14;stop-opacity:1"/>
            <stop offset="87%" style="stop-color:#8be4d9;stop-opacity:1"/>
        </radialGradient>
        <!-- The use of this filter carries a heavy performance penalty. So it has been commented out for now. However I've left it in here in the case you want to play around with it. -->
        <!-- Define the specular lighting filter -->
        <!-- <filter id="shiny-filter" > -->
        <!-- Create a specular lighting effect with a light source -->
        <!-- <feSpecularLighting result="specOut" specularExponent="50.0" specularConstant="20" lighting-color="white"> -->
        <!-- Define the light source -->
        <!-- <fePointLight x="100" y="100" z="20"/> -->
        <!-- <fePointLight x="90%" y="90%" z="15"/> -->
        <!-- </feSpecularLighting> -->
        <!-- Blend the specular lighting with the original graphic using the 'out' composite mode -->
        <!-- Use carefully as adjusting the k-values negatively impacts performance -->
        <!-- <feComposite in="SourceGraphic" in2="specOut" operator="arithmetic" k1="0" k2="1" k3="0" k4="0"/> -->
        <!-- </filter> -->
        <!-- Create a mask using the plot1 path as the clipping shape -->
        <mask id="plot1Mask">
            <path id="plot1" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot2Mask">
            <path id="plot2" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot3Mask">
            <path id="plot3" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot4Mask">
            <path id="plot4" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot5Mask">
            <path id="plot5" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot6Mask">
            <path id="plot6" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot7Mask">
            <path id="plot7" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot8Mask">
            <path id="plot8" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot9Mask">
            <path id="plot9" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot10Mask">
            <path id="plot10" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot11Mask">
            <path id="plot11" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot12Mask">
            <path id="plot12" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot13Mask">
            <path id="plot13" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot14Mask">
            <path id="plot14" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot15Mask">
            <path id="plot15" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot16Mask">
            <path id="plot16" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot17Mask">
            <path id="plot17" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot18Mask">
            <path id="plot18" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot19Mask">
            <path id="plot19" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot20Mask">
            <path id="plot20" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot21Mask">
            <path id="plot21" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
        <mask id="plot22Mask">
            <path id="plot22" fill="#fff" stroke="#fff" stroke-width="0.25" fill-rule="evenodd"
                  filter="url(#shiny-filter)"/>
        </mask>
    </defs>
    <!-- Individual Gradient Circles for Each Plot Mask -->
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot1Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot2Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot3Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot4Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot5Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot6Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot7Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot8Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot9Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot10Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot11Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot12Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot13Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot14Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot15Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot16Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot17Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot18Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot19Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot20Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot21Mask)"/>
    <rect width="100%" height="100%" fill="url(#grad1)" mask="url(#plot22Mask)"/>
    <!-- You can use this rect element below to visualize the gradient when adjusting -->
    <!-- <rect width= "100%" height= "100%" fill="url(#grad1)" mask="url(#plot23Mask)" /> -->
    <!-- The Javascript code starts here -->
    <script type="text/ecmascript">
        <![CDATA[

    // Adjustable variables. Take care while adjusting these as small changes in the values can result in massive changes in the result.
    const baseRadFactor = 0.0022; //the radius of the smallest ring. Adjust carefully as small changes result it large results. Generally keep wthin the range of 0.0015 and 0.0022.
    const octaveSpeed = 0.007; // controls the speed for animating octaves
    const plotRotationSpeed = -0.009; //adjust value to control speed of plot rotation and sign to control direction.
    const plotThickness = 0.3; //adjust the thickness of each plot
    const wobblyConstant = 1.1; //This adjust the frequency of the perlin noise allowing for more peaks.
    const numPoints = 250; // Resolution of the plot for each ring. This can be adjusted to get a better balance betwen performance and visual fidelity
    const plotGap = 0.00017; //Distance between each plot. small changes produce large results.

    //These variables are best left untouched as they either produce little to no visual changes or massive negative results when adjusted as the
    const numPlots = 22; //this number corresponds to the number of plots in the svg section
    const plots = []; //array to hold the plot details
    const maxTheta = 2 * Math.PI; //Used in the polar coordinates calculation which gives the circular appearance, this variable limits the circle to just one turn.
    let baseRad = 1.7; //the radius of the smallest ring.
    let coordinateCentrePoint = 850; // Initial value for coordinateCentrePoint
    const amplitudeFactor = 1; //this can also be used to control the distance between each plot
    let octaves = 0.1; // this is the first z-value among the arguments fed into the noise function and translating this value produces the shape shifting.
    let noiseIntensityFactor = 1.8; //multiplier for the noise intensity, useful if the viewbox gets resized
    let rotationAngle = 0; // Initialize rotation angle

    // Function to extract viewBox dimensions from SVG elements
    const extractViewBoxDimensions = () => {
      const svgElements = document.getElementById('ringPlots');
      const viewBoxWidth = svgElements.viewBox.baseVal.width;
      const viewBoxHeight = svgElements.viewBox.baseVal.height;
      coordinateCentrePoint = Math.min(viewBoxWidth, viewBoxHeight) / 2;
    };

    // function to adjust the baseRad and noiseIntensityFactor if the viewbox is resized
    const adjustBaseRad = () => {
      baseRad = coordinateCentrePoint * baseRadFactor;
      noiseIntensityFactor = coordinateCentrePoint * 0.0014;
    };

    // Extract viewBox dimensions from SVG elements
    extractViewBoxDimensions();

    // adjust baseRad and noiseIntensityFactor values
    adjustBaseRad();

    // Initialize plots array
    for (let i = 0; i < numPlots; i++) {
      const path = document.getElementById(`plot${i + 1}`);
      const noiseIntensity = noiseIntensityFactor * (i / (numPlots - 1)); // noise intensity control for each ring as they move towards the edge
      const initialValue = i * plotGap; // As the loop works itself towards the outer plots, the initialValue is increased to create a larger distance from the centre for each plot. This basically denotes the base radius of each plot.
      plots.push({
        path,
        noiseIntensity,
        initialValue
      });
    }

    // Function to render a plot
    const renderPlot = (path, initialValue, noiseIntensity) => {
      let d = 'M';
      let innerD = '';
      // Iterate through points to create the plot
      for (let i = 0; i <= numPoints; i++) {
        const theta = (i / numPoints) * maxTheta;
        const thetaWithRotation = theta + rotationAngle; // Update theta with rotation angle
        // Calculate outer and inner radii
        const outerR = calculateR(thetaWithRotation, initialValue, noiseIntensity);
        //const innerR = calculateInnerR(thetaWithRotation, initialValue, noiseIntensity);
        const innerR = outerR - plotThickness;
        // Calculate outer coordinates
        const xOuter = coordinateCentrePoint + outerR * Math.cos(theta);
        const yOuter = coordinateCentrePoint + outerR * Math.sin(theta);
        d += `${xOuter},${yOuter} `;
        // Check if last point to close the outer ring
        if (i === numPoints) {
          d += ' ';
        }
        // Calculate inner coordinates
        const xInner = coordinateCentrePoint + innerR * Math.cos(theta);
        const yInner = coordinateCentrePoint + innerR * Math.sin(theta);
        innerD += `${xInner},${yInner} `;
      }
      // Combine outer and inner paths and close the path for the inner ring
      d += innerD + 'Z';
      path.setAttribute('d', d);
    };

    // This is a port of Ken Perlin's Java code.
    const fade = t => t * t * t * (t * (t * 6 - 15) + 10);
    const lerp = (t, a, b) => a + t * (b - a);
    const grad = (hash, x, y, z) => {
      const h = hash & 15; // CONVERT LO 4 BITS OF HASH CODE
      const u = h < 8 ? x : y, // INTO 12 GRADIENT DIRECTIONS.
        v = h < 4 ? y : h == 12 || h == 14 ? x : z;
      return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
    };
    const scale = n => Math.pow((1 + n) / 1.75, 3.5);
    const p = new Array(512);
    const permutation = [
      151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,
      8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203,
      117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165,
      71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92,
      41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,
      89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217,
      226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58,
      17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155,
      167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218,
      246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14,
      239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150,
      254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,
    ];
    for (let i = 0; i < 256; i++) p[256 + i] = p[i] = permutation[i];
    const PerlinNoise = (x, y, z) => {
      const X = Math.floor(x) & 255, // FIND UNIT CUBE THAT
        Y = Math.floor(y) & 255, // CONTAINS POINT.
        Z = Math.floor(z) & 255;
      x -= Math.floor(x); // FIND RELATIVE X,Y,Z
      y -= Math.floor(y); // OF POINT IN CUBE.
      z -= Math.floor(z);
      const u = fade(x), // COMPUTE FADE CURVES
        v = fade(y), // FOR EACH OF X,Y,Z.
        w = fade(z);
      const A = p[X] + Y,
        AA = p[A] + Z,
        AB = p[A + 1] + Z, // HASH COORDINATES OF
        B = p[X + 1] + Y,
        BA = p[B] + Z,
        BB = p[B + 1] + Z; // THE 8 CUBE CORNERS,
      return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z), // AND ADD
            grad(p[BA], x - 1, y, z), ), // BLENDED
          lerp(u, grad(p[AB], x, y - 1, z), // RESULTS
            grad(p[BB], x - 1, y - 1, z), ), ), // FROM  8
        lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1), // CORNERS
            grad(p[BA + 1], x - 1, y, z - 1), ), // OF CUBE
          lerp(u, grad(p[AB + 1], x, y - 1, z - 1), grad(p[BB + 1], x - 1, y - 1, z - 1)), ), ), );
    };

    // function to calculate outer radius using perlin noise
    const calculateR = (theta, initialValue, noiseIntensity) => {
      const r = initialValue + baseRad + noiseIntensity * PerlinNoise(wobblyConstant * Math.cos(theta), wobblyConstant * Math.sin(theta), octaves);
      return r * 300 + Math.pow(2, initialValue * amplitudeFactor); // Scale factor for visualization, the value that multiplies the
      // r variable can be used to adjust the radius of the plot
      // The exponential function is necessary for achieving the steepness generated, take care while adjusting this value
    };

    // Start the theta animation
    let lastFrameTime = 0;
    const animateTheta = () => {
      function updateTheta(currentTime) {
        // Calculate time since the last frame
        const deltaTime = currentTime - lastFrameTime;
        // If the time since the last frame is greater than or equal to 16.67 milliseconds (approx. 60 fps or 33.33ms for 30fps), proceed to update
        if (deltaTime >= 16.67) {
          plots.forEach(plot => {
            renderPlot(plot.path, plot.initialValue, plot.noiseIntensity);
          });
          octaves += octaveSpeed;
          // Increment rotation angle for clockwise rotation
          rotationAngle += plotRotationSpeed;
          lastFrameTime = currentTime;
        }
        // Request the next animation frame
        requestAnimationFrame(updateTheta);
      }
      // Start the animation
      requestAnimationFrame(updateTheta);
    };

    // Render all plots initially
    plots.forEach((plot, index) => renderPlot(plot.path, plot.initialValue, 0, 0, plot.noiseIntensity));

    // Start the theta animation
    animateTheta();
    ]]>
    </script>
</svg>