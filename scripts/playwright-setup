#!/usr/bin/env bash
# Build script to handle configuring Playwright for running integration tests,
# both as a "pretest" hook in `package.json` and via manual invocation in CI.
#
# By default this will run `pnpm exec playwright install` because that's the sane thing to do,
# and will work on most normal computers, such as macOS. The bulk of the logic is to handle
# special cases like non-Playwright-supported Linux distributes, such as Fedora Workstation.
# Additionally, the special-case logic *only* applies if the script is being run from within
# a nix devShell. So if you're not using nix, no problem, you don't have to. But if you are, this script
# will wire up integration testing via Playwright by committing some grave sins in symlink form.
#
# Specifically, it will inspect the contents of `~/.cache/ms-playwright`, which is a directory
# that Playwright will *always* check for browsers. If it finds pre-existing Playwright data,
# it'll preserve it and emit a warning about tests maybe not working right. If no prior Playwright
# data exists, it'll configure the symlinks, so that when playwright looks for a headless chromium,
# it'll find the nix-installed version that's present in the build store.
set -euo pipefail

# This is a hardcoded value that matches exactly the path Playwright
# will check within its browser cache dir. This value must be updated
# whenever the `playwright` npm dependency is changed. If it breaks, mention @conorsch.
_PLAYWRIGHT_CHROMIUM_HEADLESS_VERSION="1169"


# If we're not in a nix shell, then just do the simple thing:
# defer to playwright docs on default setup strategy.
if [[ -z "${IN_NIX_SHELL:-}" ]] ; then
  >&2 echo "Installing playwright..."
  pnpm exec playwright install
  exit 0
fi

# The nix devshell should export this env var; fail if not.
if [[ -z "$_PLAYWRIGHT_BROWSERS_PATH" ]] ; then
  gum log --level error --time datetime "_PLAYWRIGHT_BROWSERS_PATH not set"
  exit 1
fi

# Make sure we have a target browser to link Playwright to
nix_chromium_dir="$(fd headless_shell "$_PLAYWRIGHT_BROWSERS_PATH" --follow -t d)"

if [[ -z "$nix_chromium_dir" ]] ; then
  gum log --level error --time datetime "failed to find chromium headless installation in nix env"
  exit 2
fi

# Playwright will *always* check this dir, regardless of env vars like PLAYWRIGHT_BROWSERS_PATH.
playwright_cache_dir="${HOME:?}/.cache/ms-playwright"
playwright_chromium_dir="${playwright_cache_dir}/chromium_headless_shell-${_PLAYWRIGHT_CHROMIUM_HEADLESS_VERSION}"

# Create a textbox for displaying a readable message.
# Also theme it kinda like Penumbra.
function format_message() {
  local s
  s="${1:-}"
  shift 1
  gum style \
    --background "#000000" \
    --foreground "#FFFFFF" \
    --border "rounded" \
    --border-foreground "#FFA500" \
    --padding "1 2" \
    --align center \
    --margin "1" \
    "$s"
}

# Inform the user that there's pre-existing Playwright state
# that we don't want to mess with.
function display_user_warning() {
    # Declare message as a heredoc, store it in a var.
    msg="$(cat <<EOM

Found pre-existing data in Playwright cache dir: $playwright_cache_dir
The integration testing config for this repo will try to overwrite that content.
If you don't care about prior Playwright browser cache, remove the directory and rerun the tests:

  rm -r "$playwright_cache_dir"

Otherwise, move the dir aside and re-run the tests:

  mv "$playwright_cache_dir{,.bak}"

Doing so will re-initialize Playwright for specifically this git repo.
You'll need to remove the dir before setting up Playwright with a different project,
via 'pnpm playwright install' or similar.

EOM
)"
  format_message "$msg"
}

# Create symlink so that the browser path Playwright uses refers to a browser
# within the nix-installed package store.
function setup_playwright_symlink() {
  gum log --level info --time datetime "Creating browser symlink for playwright to use a nix-managed browser"
  mkdir -p "$playwright_cache_dir"
  rm -f "$playwright_chromium_dir"
  ln -sf "$nix_chromium_dir" -v "$playwright_chromium_dir"
}

# If we're in CI, it's OK to shove things around.
if [[ -n "${CI:-}" ]] ; then
  gum log --level=info --time datetime "Detected CI environment, configuring Playwright for nix devshell"
  # Clobber the local config
  mkdir -p "$playwright_cache_dir"
  gum log --level=debug "Linking '$nix_chromium_dir' -> '$playwright_chromium_dir'"
  setup_playwright_symlink
# Handle the Playwright cache dir gently, if we're on a developer machine.
else
  gum log --level=debug --time datetime "'CI' env var not set; assuming developer workstation; proceeding carefully"
  # If the cache dir exists
  if [[ -e "$playwright_cache_dir" ]] ; then
    # We check for what exactly matches our expectations:
    # only one entry, and it's a symlink.
    playwright_cache_dir_contents="$(fd . "$playwright_cache_dir")"
    # If the playwright dir has only one entry, and it's a symlink
    if [[ "$(wc -l <<< "$playwright_cache_dir_contents")" -eq 1 ]] && [[ -L "$playwright_cache_dir_contents" ]] ; then
      # If we got this far, it's ok to manage and clobber.
      # Check if anything needs to be done.
      target="$(readlink "$playwright_cache_dir_contents")"
      if [[ "$playwright_cache_dir_contents" = "$playwright_chromium_dir" ]] && [[ "$target" = "$nix_chromium_dir" ]] ; then
        gum log --level debug --time datetime "Playwright setup looks good, making no changes"
        exit 0
      else
        gum log --level debug --time datetime "Found pre-existing single symlink in playwright cache, clobbering"
        setup_playwright_symlink
      fi
    # If the cache dir exists and has multiple entries, then prior Playwright initialization
    #
    # was performed, so let's preserve the state and warn.
    else
      display_user_warning
      # Sleep briefly so as not to jerk the UX, given that a large message was displayed.
      sleep 5
      # Sleep to ensure warning is visible; presumably we're calling this script in dev tooling,
      # immediately preceding a scrollback-destroyingly verbose test run.
      sleep_duration_seconds="20"
      for i in $(seq 0 "$sleep_duration_seconds") ; do
          printf '\rResuming script in %s... ' "$(( sleep_duration_seconds - i ))"
          sleep 1
      done
      gum log --level=warn --time datetime "Resuming; integration tests may not work correctly!"
      exit 0
    fi
  # If no prior state was found, OK to set it up!
  else
    setup_playwright_symlink
  fi
fi
